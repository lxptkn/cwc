generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            UserRole  @default(STUDENT)
  profileImage    String?
  yearsExperience Int?
  awards          String[]
  bio             String?
  specialties     String[]
  languages       String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  bookings        Booking[]
  createdClasses  Class[]   @relation("ClassInstructor")
  reviews         Review[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id                    Int       @id @default(autoincrement())
  title                 String
  description           String
  location              String
  address               String
  instructorName        String
  duration              String
  cuisineType           String
  difficulty            String
  rating                Float
  about                 String
  menu                  String
  schedule              String
  highlights            String
  additionalInformation String
  maxStudents           Int
  price                 Float
  image                 String?
  instructorId          String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  bookings              Booking[]
  instructor            User      @relation("ClassInstructor", fields: [instructorId], references: [id])
  reviews               Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  classId   Int
  author    String
  content   String
  rating    Float
  createdAt DateTime @default(now())
  userId    String?
  class     Class    @relation(fields: [classId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Booking {
  id        Int           @id @default(autoincrement())
  classId   Int
  userId    String
  status    BookingStatus @default(CONFIRMED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  class     Class         @relation(fields: [classId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@unique([classId, userId])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
