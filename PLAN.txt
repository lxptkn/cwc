# Cooking with Class - Instructor Profiles & Images Implementation Plan

## Overview
This plan outlines the implementation of instructor profiles (Option 1 from adding instructors.md) and image support for both classes and user profiles.

## Phase 1: Database Schema Updates

### 1.1 Update Prisma Schema
- Add instructor profile fields to User model (already done in schema)
- Add image field to Class model
- Generate and apply migration

### 1.2 Image Storage Strategy
**Recommended Approach: Public Folder with Organized Structure**
```
public/
├── images/
│   ├── classes/
│   │   ├── pasta-pandemonium.jpg
│   │   ├── sushi-shenanigans.jpg
│   │   └── ...
│   ├── instructors/
│   │   ├── giovanni-spaghetti.jpg
│   │   ├── aiko-tanaka.jpg
│   │   └── ...
│   └── profiles/
│       ├── user-1.jpg
│       ├── user-2.jpg
│       └── ...
```

**Image Naming Convention:**
- Classes: `{slugified-title}.jpg` (e.g., `pasta-pandemonium.jpg`)
- Instructors: `{slugified-name}.jpg` (e.g., `giovanni-spaghetti.jpg`)
- User profiles: `user-{id}.jpg` or `{slugified-name}.jpg`

## Phase 2: Database Migration

### 2.1 Create Migration
```bash
npx prisma migrate dev --name add_class_images_and_instructor_profiles
```

### 2.2 Update Seed Script
- Create 10 instructor users with full profiles
- Assign multiple classes to each instructor
- Add image paths to classes and instructor profiles
- Ensure proper relationships between instructors and classes

## Phase 3: TypeScript Type Updates

### 3.1 Update User Interface
```typescript
interface User {
  // ... existing fields
  profileImage?: string
  yearsExperience?: number
  awards: string[]
  bio?: string
  specialties: string[]
  languages: string[]
}
```

### 3.2 Update Class Interface
```typescript
interface Class {
  // ... existing fields
  image?: string
}
```

## Phase 4: Component Updates

### 4.1 Instructor Profile Components
- Create `InstructorProfileCard` component
- Create `InstructorProfileForm` for editing
- Update `ClassCard` to show instructor profile image
- Update `ClassDetailPage` to show instructor details

### 4.2 Image Handling Components
- Create `ImageUpload` component for profile pictures
- Create `ClassImageUpload` component for class images
- Add image display components with fallbacks

## Phase 5: Service Layer Updates

### 5.1 User Service
- Add methods for updating instructor profiles
- Add image upload handling
- Add profile validation

### 5.2 Class Service
- Add image handling for classes
- Update class creation/editing to include images

## Phase 6: API Route Updates

### 6.1 User Profile Routes
- Add PUT route for updating instructor profiles
- Add image upload endpoint
- Add profile retrieval endpoints

### 6.2 Class Routes
- Update class creation/editing to handle images
- Add image validation

## Phase 7: Frontend Integration

### 7.1 Dashboard Updates
- Add instructor profile section
- Add profile editing capabilities
- Show instructor stats and classes

### 7.2 Class Display Updates
- Update class cards to show images
- Update class detail pages to show instructor profiles
- Add image galleries for classes

## Phase 8: Seed Data Implementation

### 8.1 Instructor Data Structure
```typescript
const instructors = [
  {
    name: "Giovanni Spaghetti",
    email: "giovanni@cookingwithclass.com",
    role: "INSTRUCTOR",
    profileImage: "/images/instructors/giovanni-spaghetti.jpg",
    yearsExperience: 15,
    awards: ["Best Italian Chef 2023", "Michelin Star 2021"],
    bio: "Master Italian chef with 15 years of experience...",
    specialties: ["Italian", "Pasta", "Pizza", "Mediterranean"],
    languages: ["English", "Italian", "French"],
    classes: ["Pasta Pandemonium", "Pizza Perfection"]
  },
  // ... 9 more instructors
]
```

### 8.2 Class Image Mapping
```typescript
const classImages = {
  "Pasta Pandemonium": "/images/classes/pasta-pandemonium.jpg",
  "Sushi Shenanigans": "/images/classes/sushi-shenanigans.jpg",
  // ... all classes
}
```

## Phase 9: Image Assets

### 9.1 Required Images
- 10 instructor profile images (professional headshots)
- 50+ class images (food/cooking scenes)
- Default placeholder images for missing content

### 9.2 Image Specifications
- Profile images: 400x400px, JPG format
- Class images: 800x600px, JPG format
- Optimize for web (compress, WebP conversion)
- Alt text for accessibility

## Phase 10: Testing & Validation

### 10.1 Database Testing
- Verify instructor profiles are created correctly
- Test class-instructor relationships
- Validate image paths

### 10.2 Component Testing
- Test image display with fallbacks
- Test profile editing functionality
- Test image upload (if implemented)

## Implementation Order

1. **Database Migration** - Update schema and run migration
2. **Seed Script** - Create comprehensive seed data with images
3. **Type Updates** - Update TypeScript interfaces
4. **Component Creation** - Build new UI components
5. **Service Updates** - Update backend services
6. **API Integration** - Connect frontend to backend
7. **Testing** - Validate all functionality
8. **Image Assets** - Add actual images to public folder

## Success Criteria

- [ ] 10 instructor profiles with complete data
- [ ] All classes have associated images
- [ ] Instructor profiles display correctly on class pages
- [ ] Profile editing works for instructors
- [ ] Images load properly with fallbacks
- [ ] Database relationships are correct
- [ ] Seed script runs without errors
- [ ] All components render without errors

## Notes

- Use placeholder images initially (e.g., Unsplash API or stock photos)
- Implement proper image optimization and lazy loading
- Consider implementing image upload functionality for production
- Ensure all images have proper alt text for accessibility
- Test on different screen sizes for responsive design
